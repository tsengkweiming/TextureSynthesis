// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetCandidates
#pragma kernel FindMatches
#pragma kernel PaddedSeedImage
#pragma kernel UpdateImage

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _CandidatesBuffer: register(u0);
RWTexture2D<float4> _PaddedBufferWrite: register(u1);
RWTexture2D<float4> _FilledBufferWrite: register(u2);
RWTexture2D<float4> gaussianMask: register(u3);

RWTexture2D<float4> _PaddedBufferRead: register(u4);
RWTexture2D<float4> _FilledBufferRead: register(u5); //max u7


Texture2D<float4> _CandidatesBufferRead;


int _OutputSize;
int _WindowSize;
int _CandidatesWidth;
int _CandidatesHeight;
float  _DeltaTime;
float  _Time;
float  _ErrThreshold;
float  _MaxErrThreshold;
float  _Rand;

Texture2D<float4> _SampleTexture;
Texture2D<float4> _SourceImage;
Texture2D<float4> _FillMap;
Texture2D<float4> _GaussianMap;
Texture2D<float4> _CandidatesMap;

AppendStructuredBuffer<int2> _UnfilledBufferAppend;
ConsumeStructuredBuffer<int2> _UnfilledBufferConsume;

RWStructuredBuffer<int> _FoundBuffer;
RWStructuredBuffer<float4> _TestBuffer;


struct image
{
	int2 index;
};

struct selectedCandidates
{
	int2 index;
	float distance;
};
struct VoxelVertex
{
	float2 Position : POSITION;
};

//update or create new 
[numthreads(8, 8, 1)]
void PaddedSeedImage(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	float width, height;
	_PaddedBufferWrite.GetDimensions(width, height);

	uint halfWindow = (uint)floor(15 / 2);
	//if outline
	if (DTid.x < halfWindow || DTid.x > width - 1 - halfWindow - 10 || DTid.y < halfWindow || DTid.y > height - 1 - halfWindow - 10) {
		_PaddedBufferWrite[DTid.xy] = float4(0, 1, 0, 1);
		_FilledBufferWrite[DTid.xy] = float4(1, 0, 0, 1);

	}
	else {
		//if center
		int sampleX = DTid.x - floor(15 / 2);
		int sampleY = DTid.y - floor(15 / 2);

		_PaddedBufferWrite[DTid.xy] = float4(_SourceImage[int2(sampleX, sampleY)].xyz, 1);
		_FilledBufferWrite[DTid.xy] = float4(_FillMap[int2(sampleX, sampleY)].xyz, 1);

		if (_FillMap[int2(sampleX, sampleY)].x != 1) {
			_UnfilledBufferAppend.Append(DTid.xy);
		}
	}
}

[numthreads(8, 8, 1)]
void GetCandidates(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	float width, height;
	_CandidatesBuffer.GetDimensions(width, height);
	int sampleX = floor(DTid.x / 15);
	sampleX = sampleX + DTid.x % 15;

	int sampleY = floor(DTid.y / 15);
	sampleY = sampleY + DTid.y % 15; // 多出來的750-760從頭開始? -> 0-10

	_CandidatesBuffer[DTid.xy] = float4(_SampleTexture[int2(sampleX, sampleY)].xyz, 1);
}

//update from source
[numthreads(8, 8, 1)]
void UpdateImage(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	if (_FillMap[DTid.xy].x != 1) {
		_UnfilledBufferAppend.Append(DTid.xy);
	}
}

float random1(float t) {
	return frac(sin(t * 12345.564) * 7658.76);
}
// Wang Hash Random
#define WANG_HASH_SEED_MAX 4294967295
#define INV_WANG_HASH_DIV 2.3283064e-10
float wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed * INV_WANG_HASH_DIV;
}

[numthreads(8, 8, 1)]
void FindMatches(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	//get unfill pixel
	uint2 id = _UnfilledBufferConsume.Consume();

	uint2 startIndex = id.xy - uint2(floor(15 / 2), floor(15 / 2));
	float sum = 0;

	float4 nbhd[15 * 15];
	float gauss[15 * 15];

	//loop
	for (uint j = 0; j < 15; j++) {
		for (uint i = 0; i < 15; i++) {
			//get neighborhood
			nbhd[j + i * 15] = _PaddedBufferRead[startIndex.xy + int2(j, i)];

			//calculate gaussian
			gauss[j + i * 15] = _FilledBufferRead[startIndex.xy + int2(j, i)].x * _GaussianMap[int2(j, i)].x;
			//gaussianMask[int2(j, i)] = _GaussianMap[int2(j, i)].x;// _FilledBufferRead[id.xy].x;// *
			sum = sum + gauss[j + i * 15];
		}
	}

	for (uint k = 0; k < 15; k++) {
		for (uint r = 0; r < 15; r++) {
			//gaussianMask[int2(k, h)] = gaussianMask[int2(k, h)] / sum;
			gauss[k + r * 15] = gauss[k + r * 15] / sum;
			//gaussianMask[int2(k, r)] = gauss[k + r * 15];
		}
	}

	//FindMatches
	//uint candidatesWidth, candidatesHeight;//760
	//_CandidatesBufferRead.GetDimensions(candidatesWidth, candidatesHeight);
	float distances[50 * 50]; //64 - 15 + 1

	float3 temp3;
	float diff;
	float minDistance = 100;

	for (uint g = 0; g < 50; g++) {//candidatesWidth
		for (uint h = 0; h < 50; h++) {//candidatesHeight

			diff = 0;
			for (uint m = 0; m < 15; m++) {
				for (uint n = 0; n < 15; n++) {
					//temp3 = _CandidatesBuffer[int2(j * 15 + m, i * 15 + n)].xyz - _NbhdBuffer[int2(m, n)].xyz;
					temp3 = _CandidatesBufferRead[int2(g * 15 + m, h * 15 + n)].xyz - nbhd[m + n * 15].xyz;
					//diff = diff + (temp3.x * temp3.x + temp3.y * temp3.y + temp3.z * temp3.z) * gaussianMask[int2(m, n)].x;
					diff = diff + (temp3.x * temp3.x + temp3.y * temp3.y + temp3.z * temp3.z) * gauss[m + n * 15];
				}
			}
			distances[g + h * 50] = diff;
			//_CandidatesBuffer[int2(j * 14, i * 14)] = float4(1, 0, sin(_Time), 1);

			if (distances[g + h * 50] < minDistance) {
				minDistance = distances[g + h * 50];
			}
		}
	}

	float minThreshold = minDistance * (1 + _ErrThreshold);

	int2 tempLastIndex = int2(-1, -1); // = int2(5,5)= int2(-1, -1); //64 - 15 + 1
	//bool candidateFound = false;

	uint i = 0;
	uint theIndex = 0;
	int2 indexArray[50 * 50];
	for (uint p = 0; p < 50; p++) {
		for (uint q = 0; q < 50; q++) {
			if (distances[p + q * 50] <= minThreshold)
			{
				tempLastIndex = int2(p, q);
				indexArray[i] = int2(p, q);
				i++;
				gaussianMask[int2(id.x % 15, id.y % 15)] = float4(p / 50.0, q / 50.0, 0, 1);
			}
		}
	}
	if (distances[tempLastIndex.x + tempLastIndex.y * 50] > 0) {
		//_TestBuffer[0] = id.xyxy;// distances[tempLastIndex.x + tempLastIndex.y * candidatesWidth];
		//_TestBuffer[0] = floor(i * _Rand);
		_TestBuffer[0].x = i;
	}

	theIndex = floor(i * _Rand);
	//tempLastIndex = indexArray[theIndex];

	if (id.x > 0 && id.y > 0 && tempLastIndex.x != -1 && distances[tempLastIndex.x + tempLastIndex.y * 50] < _MaxErrThreshold /3 )
	{
		_PaddedBufferWrite[id] = _CandidatesBufferRead[int2((tempLastIndex.x - 1) * 15 - 1 + 8, (tempLastIndex.y - 1) * 15 - 1 + 8)];
		_FilledBufferWrite[id] = float4(1, 1, 0, 1);
		//_FoundBuffer[0] = 1;
	}
	else {
		_PaddedBufferWrite[id] = float4(0, 0, sin(_Time)+0.1, 1);
		_FilledBufferWrite[id] = float4(0, 0, 1, 1);
	}

	//if (id.x <= 14 && id.y <= 14) {
	//	_PaddedBufferWrite[id] = _CandidatesBufferRead[int2(id.x, id.y)];// _CandidatesBufferRead[int2((tempLastIndex.x - 1) * 15 - 1 + 8, (tempLastIndex.y - 1) * 15 - 1 + 8)];
	//}
}
