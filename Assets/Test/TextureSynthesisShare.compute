// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetCandidates
#pragma kernel FindMatches
#pragma kernel PaddedSeedImage
#pragma kernel UpdateImage

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _CandidatesBuffer: register(u0);
RWTexture2D<float4> _PaddedBufferWrite: register(u1);
RWTexture2D<float4> _FilledBufferWrite: register(u2);
RWTexture2D<float4> _PaddedBufferRead: register(u3);
RWTexture2D<float4> _FilledBufferRead: register(u4); //max u7


Texture2D<float4> _CandidatesBufferRead;


uint _OutputSize;
uint _WindowSize;
uint _PaddedWindowSize;
uint _MetaPadSize;
uint _CandidatesWidth;
uint _CandidatesHeight;
float  _DeltaTime;
float  _Time;
float  _ErrThreshold;
float  _MaxErrThreshold;
float  _Rand;

Texture2D<float4> _SampleTexture;
Texture2D<float4> _SourceImage;
Texture2D<float4> _FillMap;
Texture2D<float4> _GaussianMap;
Texture2D<float4> _CandidatesMap;

AppendStructuredBuffer<int2> _UnfilledBufferAppend;
ConsumeStructuredBuffer<int2> _UnfilledBufferConsume;

RWStructuredBuffer<int> _FoundBuffer;
RWStructuredBuffer<float4> _TestBuffer;
//RWStructuredBuffer<int2> _SelectedIndexBuffer;

#define SIMULATION_BLOCK_SIZE 16

cbuffer cb {

};
//update or create new 
[numthreads(8, 8, 1)]
void PaddedSeedImage(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	float width, height;
	_PaddedBufferWrite.GetDimensions(width, height);

	uint halfWindow = (_WindowSize - 1) / 2;
	//if outline
	if (DTid.x < halfWindow || DTid.x > width - 1 - halfWindow - _MetaPadSize || DTid.y < halfWindow || DTid.y > height - 1 - halfWindow - _MetaPadSize) {
		_PaddedBufferWrite[DTid.xy] = float4(0, 0, 0, 1);
		_FilledBufferWrite[DTid.xy] = float4(0, 1, 0, 1);

	}
	else {
		//if center
		int sampleX = DTid.x - (_WindowSize) / 2;
		int sampleY = DTid.y - (_WindowSize) / 2;

		_PaddedBufferWrite[DTid.xy] = float4(_SourceImage[int2(sampleX, sampleY)].xyz, 1);
		_FilledBufferWrite[DTid.xy] = float4(_FillMap[int2(sampleX, sampleY)].xyz, 1);

		if (_FillMap[int2(sampleX, sampleY)].x != 1) {
			_UnfilledBufferAppend.Append(DTid.xy);
		}
	}
}

[numthreads(8, 8, 1)]
void GetCandidates(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	float width, height;
	_CandidatesBuffer.GetDimensions(width, height);
	int sampleX = floor(DTid.x / _PaddedWindowSize);	//滑動步伐
	sampleX = sampleX + DTid.x % _PaddedWindowSize;		//每一步填0-15 共16色

	int sampleY = floor(DTid.y / _PaddedWindowSize);
	sampleY = sampleY + DTid.y % _PaddedWindowSize;

	_CandidatesBuffer[DTid.xy] = float4(_SampleTexture[int2(sampleX, sampleY)].xyz, 1);
}

//update from source
[numthreads(8, 8, 1)]
void UpdateImage(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	if (_FillMap[DTid.xy].z == 1) {
		_UnfilledBufferAppend.Append(DTid.xy);
	}
}

float random1(float t) {
	return frac(sin(t * 12345.564) * 7658.76);
}

float rand(float2 co) {
	return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

// Wang Hash Random
#define WANG_HASH_SEED_MAX 4294967295
#define INV_WANG_HASH_DIV 2.3283064e-10
float wang_hash(uint seed)
{
	seed = (seed ^ 61) ^ (seed >> 16);
	seed *= 9;
	seed = seed ^ (seed >> 4);
	seed *= 0x27d4eb2d;
	seed = seed ^ (seed >> 15);
	return seed * INV_WANG_HASH_DIV;
}

//groupshared float4 candidate_shared_patch[16 * 16];
[numthreads(16, 16, 1)]//一つのgroupには(16, 16, 1)のスレッドが含まれます
void FindMatches(uint3 Gid : SV_GroupID, uint3 DTid : SV_DispatchThreadID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
	//get unfill pixel
	uint2 id = _UnfilledBufferConsume.Consume();

	uint2 startIndex = id.xy - uint2((_WindowSize - 1) / 2, (_WindowSize - 1) / 2);
	float sum = 0;

	float4 nbhd[31 * 31]; //_WindowSize*_WindowSize 15 23 11 27 31
	//float gauss[27 * 27]; //_WindowSize*_WindowSize

	//loop
	for (uint j = 0; j < _WindowSize; j++) {
		for (uint i = 0; i < _WindowSize; i++) {
			//get neighborhood
			nbhd[j + i * _WindowSize].xyz = _PaddedBufferRead[startIndex.xy + int2(j, i)].xyz;

			//calculate gaussian with only valid elements
			nbhd[j + i * _WindowSize].w = _FilledBufferRead[startIndex.xy + int2(j, i)].x * _GaussianMap[int2(j, i)].x;
			//gaussianMask[int2(j, i)] = _GaussianMap[int2(j, i)].x;// _FilledBufferRead[id.xy].x;// *
			sum = sum + nbhd[j + i * _WindowSize].w;
		}
	}

	//sum = (sum == 0 ? 1 : sum);

	//if (sum != 0) {
	//	//normalize gauss 
	//	for (uint k = 0; k < _WindowSize; k++) {
	//		for (uint r = 0; r < _WindowSize; r++) {
	//			//gaussianMask[int2(k, h)] = gaussianMask[int2(k, h)] / sum;
	//			gauss[k + r * _WindowSize] = gauss[k + r * _WindowSize] / sum;
	//			//gaussianMask[int2(k, r)] = gauss[k + r * 15];
	//		}
	//	}
	//}
	//else {
	//	for (uint k = 0; k < _WindowSize; k++) {
	//		for (uint r = 0; r < _WindowSize; r++) {
	//			//gaussianMask[int2(k, h)] = gaussianMask[int2(k, h)] / sum;
	//			gauss[k + r * _WindowSize] = 0;
	//			//gaussianMask[int2(k, r)] = gauss[k + r * 15];
	//		}
	//	}
	//}


	//FindMatches
	float distances[54 * 54]; //64 - 15 + 1 //_CandidatesWidth * _CandidatesHeight 50 44 56 62 58

	float3 temp3;
	float diff;
	float minDistance = 100;

	//uint currentTile = 0;
	//uint2 coordGT;
	//uint2 coordG;
	//for (uint g = 0; g < 64; g += 16) {
	//	for (uint h = 0; h < 64; h += 16) {

	//		coordGT.x = floor(GTid.x / _PaddedWindowSize);
	//		coordGT.y = GTid.x % _PaddedWindowSize;
	//		coordG.x = floor(Gid.x / 4);
	//		coordG.y = Gid.x % 4;

	//		//candidate_shared_patch[GTid.x] = _CandidatesBufferRead[coordG.xy * _PaddedWindowSize + coordGT.xy * _PaddedWindowSize];
	//		//candidate_shared_patch[GI] = _CandidatesBufferRead[Gid.xy * _PaddedWindowSize + GTid.xy];
	//		//candidate_shared_patch[GI] = _CandidatesBufferRead[Gid.xy * _PaddedWindowSize * SIMULATION_BLOCK_SIZE + GTid.xy * _PaddedWindowSize];
	//		candidate_shared_patch[GI] = _CandidatesBufferRead[Gid.xy * _PaddedWindowSize + GTid.xy];
	//		GroupMemoryBarrierWithGroupSync();

	//		diff = 0;
	//		for (uint m = 0; m < _WindowSize; m++) {
	//			for (uint n = 0; n < _WindowSize; n++) {
	//				temp3 = candidate_shared_patch[m + n * _PaddedWindowSize].xyz - nbhd[m + n * _WindowSize].xyz;
	//				diff = diff + (temp3.x * temp3.x + temp3.y * temp3.y + temp3.z * temp3.z) * gauss[m + n * _WindowSize];
	//			}
	//		}
	//		distances[g + h * _CandidatesWidth] = diff;

	//		if (distances[g + h * _CandidatesWidth] < minDistance) {
	//			minDistance = distances[g + h * _CandidatesWidth];
	//		}
	//	}
	//	GroupMemoryBarrierWithGroupSync();
	//	currentTile++;
	//}

	for (uint g = 0; g < _CandidatesWidth; g++) { //50
		for (uint h = 0; h < _CandidatesHeight; h++) { //50

			diff = 0;
			for (uint m = 0; m < _WindowSize; m++) {//15
				for (uint n = 0; n < _WindowSize; n++) {
					temp3 = _CandidatesBufferRead[int2(g * _PaddedWindowSize + m, h * _PaddedWindowSize + n)].xyz - nbhd[m + n * _WindowSize].xyz;
					//temp3 = temp3 * gauss[m + n * _WindowSize];
					diff += (temp3.x * temp3.x + temp3.y * temp3.y + temp3.z * temp3.z) * nbhd[m + n * _WindowSize].w;
				}
			}
			distances[g + h * _CandidatesWidth] = diff / sum;

			if (minDistance > distances[g + h * _CandidatesWidth]) {
				minDistance = distances[g + h * _CandidatesWidth];
			}
		}
	}

	float minThreshold = minDistance * (1 + _ErrThreshold);
	int2 tempLastIndex = int2(-1, -1); // = int2(5,5)= int2(-1, -1); //64 - 15 + 1

	uint i = 0;
	uint2 theIndex = 0;
	//int2 indexArray[56 * 56]; //_CandidatesWidth * _CandidatesHeight 50 44 56
	for (uint p = 0; p < _CandidatesWidth; p++) {
		for (uint q = 0; q < _CandidatesHeight; q++) {
			if (distances[p + q * _CandidatesWidth] <= minThreshold)
			{
				tempLastIndex = int2(p, q);
				//_SelectedIndexBuffer[i] = int2(p, q);
				//indexArray[i] = int2(p, q);
				i++;
				//gaussianMask[int2(id.x % _WindowSize, id.y % _WindowSize)] = float4((float)p / _CandidatesWidth, (float)q / _CandidatesHeight, 0, 1);
			}
		}
	}

	//theIndex = _SelectedIndexBuffer[floor(i * _Rand)];
	//theIndex = _SelectedIndexBuffer[(uint)(i * rand(float2(id / 64.0)))];


	if (sum > 0 && tempLastIndex.x != -1 && distances[tempLastIndex.x + tempLastIndex.y * _CandidatesWidth] < _MaxErrThreshold)
		//if (id.x > 0 && id.y > 0 && i > 0 && distances[theIndex.x + theIndex.y * _CandidatesWidth] < _MaxErrThreshold)
	{
		_PaddedBufferWrite[id] = _CandidatesBufferRead[int2((tempLastIndex.x) * _PaddedWindowSize - 1 + ((_WindowSize - 1) / 2) + 1, (tempLastIndex.y) * _PaddedWindowSize - 1 + ((_WindowSize - 1) / 2) + 1)];
		//_PaddedBufferWrite[id] = _CandidatesBufferRead[int2((theIndex.x - 1) * _WindowSize - 1 + ((_WindowSize + 1) / 2), (theIndex.y - 1) * _WindowSize - 1 + ((_WindowSize + 1) / 2))];
		_FilledBufferWrite[id] = float4(1, 1, 0, 1);
		_FoundBuffer[0] = 1;
	}
	else {
		_PaddedBufferWrite[id] = float4(0, 0, 0, 1);
		_FilledBufferWrite[id] = float4(0, 0, 1, 1);
	}

	//if (id.x <= 14 && id.y <= 14) {
	//	_PaddedBufferWrite[id] = _CandidatesBufferRead[int2(id.x, id.y)];// _CandidatesBufferRead[int2((tempLastIndex.x - 1) * 15 - 1 + 8, (tempLastIndex.y - 1) * 15 - 1 + 8)];
	//}
}
